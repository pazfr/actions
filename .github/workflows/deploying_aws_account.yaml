name: Process Merged AWS Account PR

on:
  pull_request:
    types: [closed] # This workflow runs when any PR is closed

permissions:
  contents: read 
  id-token: write  # REQUIRED for OIDC to AWS authentication

jobs:
  post_merge_actions:
    name: Perform Actions After Account PR Merge
    if: |
      github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.head.ref, 'feature/add-account-')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (merged base branch)
        uses: actions/checkout@v4
        with:
          # Checkout the code from the branch the PR was merged into (e.g., main)
          # This ensures we have the updated accounts-config.yaml
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Zip Repository Contents
        id: zip_repo
        run: |
          ZIP_FILENAME="aws-accelerator-configuration.zip"
          echo "Zipping repository contents to $ZIP_FILENAME..."
          zip -r ${{ github.workspace }}/$ZIP_FILENAME . 
          echo "Repository content zipped to ${{ github.workspace }}/$ZIP_FILENAME"
          ls -lh ${{ github.workspace }}/$ZIP_FILENAME
          echo "zip_filename=$ZIP_FILENAME" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials via OIDC
        env:
          AWS_ACCOUNT_ID: "615299762807"
          AWS_ASSUME_ROLE_ARN: "arn:aws:iam::615299762807:role/github_role" # <<< REPLACE THIS
          REGION: us-east-1 
        uses: aws-actions/configure-aws-credentials@v4 # Using latest major version
        with:
          # Replace with the ARN of the IAM Role you created in AWS
          role-to-assume: ${{ env.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ env.REGION }} # e.g., us-east-1, region of your S3 bucket

      - name: Upload Package to S3
        env:
          S3_BUCKET_NAME: "testbacket123123123"
          ACCOUNT_NAME: ${{ steps.extract_info.outputs.account_name }}
          ZIP_FILE_PATH: "${{ github.workspace }}/${{ steps.zip_repo.outputs.zip_filename }}"
          S3_OBJECT_KEY: "${{ env.BUCKET_NAME }}/zipped/"
        run: |
          set -ex # Exit on error, print commands
          echo "Uploading $ZIP_FILE_PATH to s3://$S3_BUCKET_NAME/$S3_OBJECT_KEY ..."
          aws s3 cp "$ZIP_FILE_PATH" "s3://$S3_BUCKET_NAME/$S3_OBJECT_KEY"
          echo "Successfully uploaded to s3://$S3_BUCKET_NAME/$S3_OBJECT_KEY"

