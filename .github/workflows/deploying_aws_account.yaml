name: Deploy AWS Account Post Merge Actions

on:
  pull_request:
    branches:
      - main  
    types: [closed] 

permissions:
  contents: read 
  id-token: write

jobs:
  ##################################################################################
  # 1. Zip the configuration and Upload to S3                                      
  ##################################################################################
  post_merge_actions:
    name: Perform Zip and Upload Actions
    if: |
      github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.head.ref, 'feature/add-account-')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (merged base branch)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Extract PR Account Name
        id: extract_info
        run: |
          ACCOUNT_NAME=$(echo "${{ github.event.pull_request.title }}" | sed -n 's/feat: Add new AWS account //p')
          echo "account_name=$ACCOUNT_NAME" >> $GITHUB_OUTPUT



      - name: Zip Repository Contents
        id: zip_repo
        run: |
          ZIP_FILENAME="aws-accelerator-config.zip"
          echo "Zipping repository contents to $ZIP_FILENAME..."
          zip -r ${{ github.workspace }}/$ZIP_FILENAME . -x ".git/*" -x ".github/*"
          echo "Repository content zipped to ${{ github.workspace }}/$ZIP_FILENAME"
          ls -lh ${{ github.workspace }}/$ZIP_FILENAME
          echo "zip_filename=$ZIP_FILENAME" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Upload Package to S3
        env:

          S3_BUCKET: ${{ secrets.S3_UPLOAD_BUCKET_NAME }}
          ZIP_FILE_PATH: "${{ github.workspace }}/${{ steps.zip_repo.outputs.zip_filename }}"
        run: |
          set -ex # Exit on error, print commands"

          S3_OBJECT_KEY="zipped/${{ steps.zip_repo.outputs.zip_filename }}"
     
          echo "Uploading $ZIP_FILE_PATH to s3://$S3_BUCKET/$S3_OBJECT_KEY ..."
          aws s3 cp "$ZIP_FILE_PATH" "s3://$S3_BUCKET/$S3_OBJECT_KEY"
          echo "Successfully uploaded $ZIP_FILE_PATH to s3://$S3_BUCKET/$S3_OBJECT_KEY"


###################################################################################
# Run apply workflow to trigger AWS CodePipeline.
# Wait for account creation.
# Send Slack notification with success/failure.
###################################################################################
      - name: Trigger AWS Accelerator CodePipeline (Currently Bypassed)
        id: start_codepipeline 
        env:
          PIPELINE_NAME: "AWSAccelerator-Pipeline" 
        run: |
          echo "INFO: Triggering CodePipeline ('${{ env.PIPELINE_NAME }}')"
          EXECUTION_ID=$(aws codepipeline start-pipeline-execution --name "${{ env.PIPELINE_NAME }}" --region "${{ secrets.AWS_DEFAULT_REGION}}" --query 'pipelineExecutionId' --output text)
          if [ -z "$EXECUTION_ID" ]; then
             echo "::error::Failed to start CodePipeline '${{ env.PIPELINE_NAME }}' or retrieve execution ID."
             exit 1
          fi
          echo "Successfully started CodePipeline '${{ env.PIPELINE_NAME }}'"
          echo "pipeline_execution_id=$EXECUTION_ID" >> $GITHUB_OUTPUT

      - name: Wait for Account Creation (Placeholder / Conceptual Polling)
        id: wait_for_account_creation
        env:
          PIPELINE_NAME: "AWSAccelerator-Pipeline"
          PIPELINE_EXECUTION_ID: ${{ steps.start_codepipeline.outputs.pipeline_execution_id }}
          MAX_POLL_ATTEMPTS: 2  # attempts
          POLL_INTERVAL_SECONDS: 60 # 10 minutes
        run: |

          echo "INFO: Account creation waiting period."
            for i in $(seq 1 ${{ env.MAX_POLL_ATTEMPTS }}); do
              echo "Polling attempt $i of ${{ env.MAX_POLL_ATTEMPTS }}..."
              STATUS=$(aws codepipeline get-pipeline-execution --pipeline-name "${{ env.PIPELINE_NAME }}" --pipeline-execution-id "${{ env.PIPELINE_EXECUTION_ID }}" --query 'pipelineExecution.status' --output text)
            echo "Current status: $STATUS"
            if [ "$STATUS" == "Succeeded" ]; then
              echo "Pipeline execution Succeeded."
              echo "pipeline_status=Succeeded" >> $GITHUB_OUTPUT
              exit 0
            elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Cancelled" ] || [ "$STATUS" == "Stopped" ]; then
              echo "error::Pipeline execution $STATUS."
              echo "pipeline_status=$STATUS" >> $GITHUB_OUTPUT
              exit 1
            fi
            if [ "$i" -lt "${{ env.MAX_POLL_ATTEMPTS }}" ]; then
              echo "Waiting for ${{ env.POLL_INTERVAL_SECONDS }} seconds before next poll..."
              sleep ${{ env.POLL_INTERVAL_SECONDS }}
            fi
          done

      - name: Send Slack Notification
        if: always() 
        uses: slackapi/slack-github-action@v2.1.0
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          ACCOUNT_NAME: ${{ steps.extract_info.outputs.account_name }}
          PROCESS_OUTCOME_STATUS: ${{ steps.wait_for_account_creation.outputs.pipeline_status }}
          SLACK_MESSAGE_DETAIL: "${{ steps.wait_for_account_creation.outputs.pipeline_status == 'Succeeded' ? '✅ Account provisioning reported as successful by the pipeline.' : format('❌ Account provisioning reported issues, timed out, or has an unexpected status: {0}. Please check AWS CodePipeline logs for more details.', steps.wait_for_account_creation.outputs.pipeline_status || 'Unknown_Status') }}"

        with:
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          method: chat.postMessage
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "text": "AWS Account Workflow Update for: ${{ env.ACCOUNT_NAME }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*AWS Account Workflow Update for Account: `${{ env.ACCOUNT_NAME }}`*\nMerged PR: <${{ env.PR_URL }}|${{ env.PR_TITLE }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The AWS account provisioning process has been handled. Overall reported status: `${{ env.PROCESS_OUTCOME_STATUS }}`.\n${{ env.SLACK_MESSAGE_DETAIL }}"
                  }
                }
              ]
            }




          